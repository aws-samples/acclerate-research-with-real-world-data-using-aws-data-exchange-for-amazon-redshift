Parameters:
  CIDRBlock:
    Type: String
    Default: 10.0.0.0/16
    Description: The CIDR block for the VPC
    AllowedPattern: ^(\d{1,3}\.){3}\d{1,3}/\d{1,2}$

  DeployNATGateway1:
    Type: String
    Default: false
    Description: Set to 'true' to deploy a NAT gateway 1
    AllowedValues:
      - true
      - false

  DeployNATGateway2:
    Type: String
    Default: false
    Description: Set to 'true' to deploy a NAT gateway 2
    AllowedValues:
      - true
      - false

  DeployNATGateway3:
    Type: String
    Default: false
    Description: Set to 'true' to deploy a NAT gateway 3
    AllowedValues:
      - true
      - false

Conditions:
  ShouldDeployNATGateway1:
    Fn::Equals: [ !Ref DeployNATGateway1, true ]

  ShouldDeployNATGateway2:
    Fn::Equals: [ !Ref DeployNATGateway2, true ]

  ShouldDeployNATGateway3:
    Fn::Equals: [ !Ref DeployNATGateway3, true ]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref CIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 0, Fn::Cidr: [ !Ref CIDRBlock, 8, 8 ] ]
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value: PublicSubnet1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 1, Fn::Cidr: [ !Ref CIDRBlock, 8, 8 ] ]
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value: PublicSubnet2

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 2, Fn::Cidr: [ !Ref CIDRBlock, 8, 8 ] ]
      AvailabilityZone: !Select [ 2, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value: PublicSubnet3

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 3, Fn::Cidr: [ !Ref CIDRBlock, 8, 8 ] ]
      AvailabilityZone: !Select [ 0, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value: PrivateSubnet1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 4, Fn::Cidr: [ !Ref CIDRBlock, 8, 8 ] ]
      AvailabilityZone: !Select [ 1, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value: PrivateSubnet2

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Select [ 5, Fn::Cidr: [ !Ref CIDRBlock, 8, 8 ] ]
      AvailabilityZone: !Select [ 2, Fn::GetAZs: !Ref AWS::Region ]
      Tags:
        - Key: Name
          Value: PrivateSubnet3

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PublicRouteTable

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable2

  PrivateRouteTable3:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: PrivateRouteTable3

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  PrivateSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      SubnetId: !Ref PrivateSubnet3

  NATGateway1EIP:
    Type: AWS::EC2::EIP
    Condition: ShouldDeployNATGateway1
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NATGateway1EIP

  NATGateway1:
    Type: AWS::EC2::NatGateway
    Condition: ShouldDeployNATGateway1
    Properties:
      AllocationId: !GetAtt NATGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      ConnectivityType: public
      Tags:
        - Key: Name
          Value: NATGateway1

  NATGateway2EIP:
    Type: AWS::EC2::EIP
    Condition: ShouldDeployNATGateway2
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NATGateway2EIP

  NATGateway2:
    Type: AWS::EC2::NatGateway
    Condition: ShouldDeployNATGateway2
    Properties:
      AllocationId: !GetAtt NATGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      ConnectivityType: public
      Tags:
        - Key: Name
          Value: NATGateway2

  NATGateway3EIP:
    Type: AWS::EC2::EIP
    Condition: ShouldDeployNATGateway3
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: NATGateway3EIP

  NATGateway3:
    Type: AWS::EC2::NatGateway
    Condition: ShouldDeployNATGateway3
    Properties:
      AllocationId: !GetAtt NATGateway3EIP.AllocationId
      SubnetId: !Ref PublicSubnet3
      ConnectivityType: public
      Tags:
        - Key: Name
          Value: NATGateway3

  PublicRouteToInternetGateway:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute1ToNATGateway1:
    Type: AWS::EC2::Route
    Condition: ShouldDeployNATGateway1
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway1

  PrivateRoute2ToNATGateway2:
    Type: AWS::EC2::Route
    Condition: ShouldDeployNATGateway2
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway2

  PrivateRoute3ToNATGateway3:
    Type: AWS::EC2::Route
    Condition: ShouldDeployNATGateway3
    Properties:
      RouteTableId: !Ref PrivateRouteTable3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGateway3

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows ingress HTTP(S) connection from any IP address
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: 0.0.0.0/0
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allows ingress connections only from the Public Security Group 
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - SourceSecurityGroupId: !GetAtt PublicSecurityGroup.GroupId
          IpProtocol: '-1'
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          IpProtocol: '-1'

Outputs:
  VpcID:
    Description: The ID of the created VPC
    Value: !Ref VPC

  PublicSubnet1Id:
    Description: The ID of the created Public Subnet 1
    Value: !Ref PublicSubnet1

  PublicSubnet2Id:
    Description: The ID of the created Public Subnet 2
    Value: !Ref PublicSubnet2

  PublicSubnet3Id:
    Description: The ID of the created Public Subnet 3
    Value: !Ref PublicSubnet3

  PrivateSubnet1Id:
    Description: The ID of the created Private Subnet 1
    Value: !Ref PrivateSubnet1

  PrivateSubnet2Id:
    Description: The ID of the created Private Subnet 2
    Value: !Ref PrivateSubnet2

  PrivateSubnet3Id:
    Description: The ID of the created Private Subnet 3
    Value: !Ref PrivateSubnet3

  PublicSecurityGroupId:
    Description: The ID of the created Public Security Group
    Value: !GetAtt PublicSecurityGroup.GroupId

  PrivateSecurityGroupId:
    Description: The ID of the created Private Security Group
    Value: !GetAtt PrivateSecurityGroup.GroupId